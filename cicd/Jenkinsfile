pipeline {
    agent any

    environment {
        // Переменные окружения
        DOCKER_REPO = "${env.DOCKER_REPO_PREFIX}"
        NSS_API_KEY = credentials('tocl-nss-api-key')
        imagename = "${env.DOCKER_REPO}/powerimo/site"
        GIT_COMMIT_SHORT = "${env.GIT_COMMIT.take(7)}"
        SSH_PORT = "${SSH_DEFAULT_PORT}"
        HOST_PROD = "${POWERIMO_HOST_PROD}"
    }

    tools {
        // Инструменты, которые нужны для сборки
        nodejs 'node20'
    }

    stages {
        stage('Checkout') {
            steps {
                // Проверка исходного кода из текущей ветки
                checkout scm
                echo "SSH_PORT=${env.SSH_PORT}"
            }
        }

        stage('Install dependencies') {
            steps {
                // Установка зависимостей
                sh 'npm install'
            }
        }

        stage('Build') {
            steps {
                // Сборка проекта
                sh 'npm run build'
            }
        }

        stage('Test') {
            steps {
                // Запуск тестов
                echo 'Tests are disabled'
                // sh 'npm test'
            }
        }

        stage('Docker Build and Push') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    branch pattern: "release/.*", comparator: "REGEXP"
                }
            }
            steps {
                script {
                    echo "DOCKER_REPO=${DOCKER_REPO}"
                    def tag = "${env.BRANCH_NAME == 'main' ? 'latest' : env.BRANCH_NAME}-${GIT_COMMIT_SHORT}"
                    def tag2 = "${env.BRANCH_NAME == 'main' ? 'latest' : env.BRANCH_NAME}"
                    def dockerImage = "$imagename:$tag"
                    def dockerImage2 = "$imagename:$tag2"
                    sh "docker build -t ${dockerImage} -t ${dockerImage2} ."
                    sh "docker push ${dockerImage}"
                    sh "docker push ${dockerImage2}"
                }
            }
        }

        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh "echo 'Deploying to production environment'"
                    echo "HOST_PROD=${env.HOST_PROD}"
                    withCredentials([sshUserPrivateKey(credentialsId: 'deployagent', keyFileVariable: 'SSH_I', passphraseVariable: '', usernameVariable: 'SSH_USER_NAME')]) {
                        sh 'scp -o StrictHostKeyChecking=no -P $SSH_PORT -i $SSH_I cicd/scripts/deploy.sh $SSH_USER_NAME@${HOST_PROD}:~/bin/deploy-powerimo-site-prod.sh'
                        sh 'ssh -o StrictHostKeyChecking=no -p $SSH_PORT -i $SSH_I $SSH_USER_NAME@${HOST_PROD} "chmod +x ~/bin/deploy-powerimo-site-prod.sh"'
                        sh 'ssh -o StrictHostKeyChecking=no -p $SSH_PORT -i $SSH_I $SSH_USER_NAME@${HOST_PROD} "~/bin/deploy-powerimo-site-prod.sh PROD"'
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    // Логика деплоя для ветки develop (например, в staging)
                    sh "echo 'Deploying to staging environment'"
                }
            }
        }
    }

    post {
        always {
            nssSendJobResult(recipients: "AndewilEventsChannel")
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
